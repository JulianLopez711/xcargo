#!/usr/bin/env python3
"""
Script de prueba para verificar el endpoint /auth/solicitar-codigo
"""

import requests
import json
from datetime import datetime

# Configuraci√≥n
BASE_URL = "https://api.x-cargo.co"
LOCAL_URL = "http://localhost:8000"

def test_endpoint(base_url, correo_test="test@example.com"):
    """Prueba el endpoint de solicitar c√≥digo"""
    url = f"{base_url}/auth/solicitar-codigo"
    
    print(f"\nüîç Probando endpoint: {url}")
    print(f"üìß Correo de prueba: {correo_test}")
    print(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
    
    try:
        # Preparar datos del request
        data = {
            "correo": correo_test
        }
        
        # Hacer request POST
        response = requests.post(url, data=data, timeout=10)
        
        print(f"\nüìä RESULTADOS:")
        print(f"   Status Code: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        
        try:
            response_json = response.json()
            print(f"   Response JSON: {json.dumps(response_json, indent=2)}")
        except:
            print(f"   Response Text: {response.text}")
        
        # An√°lisis del resultado
        if response.status_code == 200:
            print("‚úÖ √âXITO: Endpoint funcionando correctamente")
        elif response.status_code == 404:
            print("‚ùå ERROR 404: Endpoint no encontrado - revisar configuraci√≥n del servidor")
        elif response.status_code == 422:
            print("‚ö†Ô∏è ERROR 422: Datos de entrada inv√°lidos")
        else:
            print(f"‚ö†Ô∏è ERROR {response.status_code}: Respuesta inesperada")
            
        return response
        
    except requests.exceptions.ConnectionError:
        print("‚ùå ERROR: No se pudo conectar al servidor")
        print("   - Verificar que el servidor est√© ejecut√°ndose")
        print("   - Verificar la URL base")
        return None
    except requests.exceptions.Timeout:
        print("‚ùå ERROR: Timeout - el servidor no respondi√≥ a tiempo")
        return None
    except Exception as e:
        print(f"‚ùå ERROR inesperado: {str(e)}")
        return None

def test_root_endpoint(base_url):
    """Prueba el endpoint ra√≠z para verificar conectividad b√°sica"""
    url = f"{base_url}/"
    print(f"\nüè† Probando endpoint ra√≠z: {url}")
    
    try:
        response = requests.get(url, timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Servidor respondiendo correctamente")
            try:
                print(f"   Response: {response.json()}")
            except:
                print(f"   Response: {response.text}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Error conectando al servidor: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO PRUEBAS DEL ENDPOINT AUTH")
    
    # Probar primero conectividad b√°sica
    print("\n" + "="*50)
    print("PASO 1: Verificar conectividad b√°sica")
    print("="*50)
    
    server_online = test_root_endpoint(BASE_URL)
    
    if not server_online:
        print("\n‚ö†Ô∏è El servidor principal no responde, probando servidor local...")
        server_online = test_root_endpoint(LOCAL_URL)
        if server_online:
            BASE_URL = LOCAL_URL
            print(f"‚úÖ Usando servidor local: {BASE_URL}")
    
    if not server_online:
        print("\n‚ùå No se pudo conectar a ning√∫n servidor")
        exit(1)
    
    # Probar endpoint de solicitar c√≥digo
    print("\n" + "="*50)
    print("PASO 2: Probar endpoint /auth/solicitar-codigo")
    print("="*50)
    
    # Correo que sabemos que no existe (para probar el flujo)
    test_endpoint(BASE_URL, "usuario.inexistente@test.com")
    
    # Si tienes un correo de prueba v√°lido, √∫salo aqu√≠
    print("\n" + "-"*30)
    print("Probando con correo potencialmente v√°lido...")
    test_endpoint(BASE_URL, "test@xcargo.co")
    
    print("\nüèÅ PRUEBAS COMPLETADAS")
    print("\nINSTRUCCIONES PARA DEBUGGING:")
    print("1. Si obtienes 404: verificar que el servidor FastAPI est√© ejecut√°ndose")
    print("2. Si obtienes 422: el endpoint existe pero los datos son inv√°lidos")
    print("3. Si obtienes 500: error interno del servidor - revisar logs")
    print("4. Si obtienes ConnectionError: verificar URL y que el servidor est√© activo")