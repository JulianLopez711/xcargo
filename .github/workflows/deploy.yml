name: Deploy Frontend and Backend to VPS

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'requirements.txt'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    name: Desplegar Frontend y Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detectar cambios
        id: changes
        run: |
          # Detectar si hay cambios en frontend
          if git diff --name-only HEAD^ HEAD | grep -E '^frontend/'; then
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Cambios detectados en frontend"
          else
            echo "frontend_changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Sin cambios en frontend"
          fi
          
          # Detectar si hay cambios en backend
          if git diff --name-only HEAD^ HEAD | grep -E '^(backend/|requirements\.txt)'; then
            echo "backend_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Cambios detectados en backend"
          else
            echo "backend_changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Sin cambios en backend"
          fi

      - name: Setup Node.js
        if: steps.changes.outputs.frontend_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Install dependencies and build frontend
        if: steps.changes.outputs.frontend_changed == 'true'
        working-directory: frontend
        run: |
          # Limpiar cach√© de npm si existe
          npm cache clean --force || true
          
          # Instalar dependencias
          npm install
          
          # Verificar que todas las dependencias est√©n instaladas
          npm list --depth=0 || echo "Algunas dependencias pueden tener conflictos menores"
          
          # Ejecutar build
          npm run build
          
          # Verificar que el build se complet√≥ correctamente
          if [ ! -d "dist" ]; then
            echo "‚ùå Error: El directorio dist no fue creado"
            exit 1
          fi
          
          echo "‚úÖ Build completado exitosamente"
          ls -la dist/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: "${{ secrets.VPS_PRIVATE_KEY }}"

      - name: Deploy to VPS via SSH
        env:
          SSH_USER: devxcargo
          SSH_HOST: 72.167.223.67
          DEPLOY_PATH: /home/devxcargo/xcargo
          FRONTEND_CHANGED: ${{ steps.changes.outputs.frontend_changed }}
          BACKEND_CHANGED: ${{ steps.changes.outputs.backend_changed }}
        run: |
          # Instalar netcat si no est√° disponible
          if ! command -v nc &> /dev/null; then
            echo "Instalando netcat..."
            sudo apt-get update && sudo apt-get install -y netcat-openbsd
          fi

          # A√±adir el host a known_hosts
          echo "Configurando SSH..."
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts 2>/dev/null

          # Funci√≥n para verificar conectividad SSH con reintentos
          verificar_ssh() {
            local intentos=0
            local max_intentos=15
            
            while [ $intentos -lt $max_intentos ]; do
              if nc -z -w5 $SSH_HOST 22; then
                echo "‚úÖ Conexi√≥n SSH verificada (intento $((intentos + 1)))"
                return 0
              fi
              intentos=$((intentos + 1))
              echo "‚è≥ Esperando conexi√≥n SSH... (intento $intentos/$max_intentos)"
              sleep 3
            done
            
            echo "‚ùå Error: No se pudo establecer conexi√≥n SSH despu√©s de $max_intentos intentos"
            return 1
          }

          # Funci√≥n para ejecutar comandos SSH con reintentos
          ejecutar_ssh() {
            local comando="$1"
            local descripcion="$2"
            local intentos=0
            local max_intentos=3
            
            while [ $intentos -lt $max_intentos ]; do
              echo "Ejecutando: $descripcion (intento $((intentos + 1))/$max_intentos)"
              
              if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=10 -o ServerAliveCountMax=3 $SSH_USER@$SSH_HOST "$comando"; then
                echo "‚úÖ $descripcion completado exitosamente"
                return 0
              fi
              
              intentos=$((intentos + 1))
              if [ $intentos -lt $max_intentos ]; then
                echo "‚ö†Ô∏è Fall√≥ $descripcion, reintentando en 5 segundos..."
                sleep 5
                verificar_ssh || return 1
              fi
            done
            
            echo "‚ùå Error: $descripcion fall√≥ despu√©s de $max_intentos intentos"
            return 1
          }

          # Verificar conectividad inicial
          verificar_ssh || exit 1

          # =============================
          # DESPLIEGUE DEL BACKEND
          # =============================
          if [ "$BACKEND_CHANGED" = "true" ]; then
            echo "üîÑ Desplegando cambios del backend..."
            
            # Transferir archivos del backend
            echo "üìÅ Transfiriendo archivos del backend..."
            scp -r -o StrictHostKeyChecking=no -o ConnectTimeout=30 backend/* $SSH_USER@$SSH_HOST:$DEPLOY_PATH/backend/ || {
              echo "‚ùå Error transfiriendo archivos del backend"
              exit 1
            }
            
            # Transferir requirements.txt si existe
            if [ -f "requirements.txt" ]; then
              echo "üìÑ Transfiriendo requirements.txt..."
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 requirements.txt $SSH_USER@$SSH_HOST:$DEPLOY_PATH/
            fi
            
            # Actualizar dependencias de Python
            echo "üêç Actualizando dependencias de Python..."
            ejecutar_ssh "cd $DEPLOY_PATH && python3 -m pip install -r requirements.txt" "Actualizar dependencias Python" || {
              echo "‚ö†Ô∏è Error actualizando dependencias Python, continuando..."
            }
            
            # Matar procesos uvicorn existentes
            echo "üîÑ Reiniciando servidor uvicorn..."
            ejecutar_ssh "pkill -f uvicorn || echo 'No hay procesos uvicorn ejecut√°ndose'" "Detener uvicorn"
            
            # Esperar un momento para que se liberen los puertos
            sleep 3
            
            # Iniciar uvicorn en background
            ejecutar_ssh "cd $DEPLOY_PATH/backend && nohup python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload > uvicorn.log 2>&1 &" "Iniciar uvicorn" || {
              echo "‚ùå Error iniciando uvicorn"
              exit 1
            }
            
            # Verificar que uvicorn est√° ejecut√°ndose
            sleep 5
            ejecutar_ssh "ps aux | grep uvicorn | grep -v grep" "Verificar uvicorn" || {
              echo "‚ö†Ô∏è Advertencia: uvicorn puede no estar ejecut√°ndose correctamente"
              ejecutar_ssh "cd $DEPLOY_PATH/backend && tail -20 uvicorn.log" "Ver logs de uvicorn"
            }
            
            echo "‚úÖ Backend desplegado exitosamente"
          else
            echo "‚ÑπÔ∏è Sin cambios en backend, omitiendo despliegue"
          fi

          # =============================
          # DESPLIEGUE DEL FRONTEND
          # =============================
          if [ "$FRONTEND_CHANGED" = "true" ]; then
            echo "üîÑ Desplegando cambios del frontend..."
            
            # Verificar que el directorio dist existe
            if [ ! -d "frontend/dist" ]; then
              echo "‚ùå Error: El directorio frontend/dist no existe"
              exit 1
            fi

            # Crear estructura de directorios en el servidor
            ejecutar_ssh "mkdir -p $DEPLOY_PATH/frontend/temp && echo 'Directorios creados correctamente'" "Creaci√≥n de directorios" || exit 1

            # Transferir archivos con reintentos
            echo "üìÅ Transfiriendo archivos del frontend..."
            transfer_intentos=0
            max_transfer_intentos=3
            
            while [ $transfer_intentos -lt $max_transfer_intentos ]; do
              transfer_intentos=$((transfer_intentos + 1))
              echo "Intento de transferencia $transfer_intentos/$max_transfer_intentos"
              
              if scp -r -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=10 frontend/dist/* $SSH_USER@$SSH_HOST:$DEPLOY_PATH/frontend/temp/; then
                echo "‚úÖ Transferencia completada exitosamente"
                break
              fi
              
              if [ $transfer_intentos -lt $max_transfer_intentos ]; then
                echo "‚ö†Ô∏è Fall√≥ la transferencia, reintentando en 5 segundos..."
                sleep 5
                verificar_ssh || exit 1
              else
                echo "‚ùå Error: Fall√≥ la transferencia despu√©s de $max_transfer_intentos intentos"
                exit 1
              fi
            done

            # Realizar el despliegue at√≥mico con script mejorado
            echo "üîÑ Realizando despliegue at√≥mico del frontend..."
            
            # Script de despliegue dividido en pasos m√°s peque√±os para evitar timeouts
            echo "Paso 1: Preparando backup..."
            ejecutar_ssh "cd $DEPLOY_PATH && if [ -d frontend/dist ]; then mv frontend/dist frontend/dist_backup_\$(date +%Y%m%d_%H%M%S); echo 'Backup creado'; else echo 'No hay directorio previo para backup'; fi" "Crear backup" || exit 1
            
            echo "Paso 2: Moviendo archivos nuevos..."
            ejecutar_ssh "cd $DEPLOY_PATH && mv frontend/temp frontend/dist && echo 'Archivos movidos exitosamente'" "Mover archivos" || {
              echo "Error moviendo archivos, intentando restaurar..."
              ejecutar_ssh "cd $DEPLOY_PATH && LATEST_BACKUP=\$(ls -dt frontend/dist_backup_* 2>/dev/null | head -n1) && if [ -n \"\$LATEST_BACKUP\" ]; then rm -rf frontend/dist 2>/dev/null || true && mv \"\$LATEST_BACKUP\" frontend/dist && echo 'Backup restaurado'; fi" "Restaurar backup"
              exit 1
            }
            
            echo "Paso 3: Verificando integridad..."
            ejecutar_ssh "cd $DEPLOY_PATH && if [ ! -d frontend/dist ] || [ -z \"\$(ls -A frontend/dist 2>/dev/null)\" ]; then echo 'Error: directorio vac√≠o'; exit 1; else echo 'Verificaci√≥n exitosa: \$(ls frontend/dist | wc -l) archivos'; fi" "Verificar archivos" || exit 1
            
            echo "Paso 4: Limpiando backups antiguos..."
            ejecutar_ssh "cd $DEPLOY_PATH && ls -dt frontend/dist_backup_* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true && echo 'Limpieza completada'" "Limpiar backups" || echo "‚ö†Ô∏è Error en limpieza (no cr√≠tico)"
            
            echo "Paso 5: Recargando nginx..."
            ejecutar_ssh "sudo systemctl reload nginx && echo 'Nginx recargado exitosamente'" "Recargar nginx" || {
              echo "‚ö†Ô∏è Error recargando nginx, pero archivos desplegados correctamente"
              echo "Puedes recargar nginx manualmente con: sudo systemctl reload nginx"
            }
            
            echo "‚úÖ Frontend desplegado exitosamente"
          else
            echo "‚ÑπÔ∏è Sin cambios en frontend, omitiendo despliegue"
          fi

          echo "üöÄ Despliegue completado exitosamente en $SSH_HOST"
          echo "‚úÖ Proceso completado sin errores"