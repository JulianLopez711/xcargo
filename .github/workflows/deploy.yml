name: Deploy Frontend to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Desplegar Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Install dependencies and build
        working-directory: frontend
        run: |
          # Limpiar cach√© de npm si existe
          npm cache clean --force || true
          
          # Instalar dependencias
          npm install
          
          # Verificar que todas las dependencias est√©n instaladas
          npm list --depth=0 || echo "Algunas dependencias pueden tener conflictos menores"
          
          # Ejecutar build
          npm run build
          
          # Verificar que el build se complet√≥ correctamente
          if [ ! -d "dist" ]; then
            echo "‚ùå Error: El directorio dist no fue creado"
            exit 1
          fi
          
          echo "‚úÖ Build completado exitosamente"
          ls -la dist/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: "${{ secrets.VPS_PRIVATE_KEY }}"

      - name: Deploy to VPS via SSH
        env:
          SSH_USER: devxcargo
          SSH_HOST: 72.167.223.67
          DEPLOY_PATH: /home/devxcargo/xcargo
        run: |
          # Instalar netcat si no est√° disponible
          if ! command -v nc &> /dev/null; then
            echo "Instalando netcat..."
            sudo apt-get update && sudo apt-get install -y netcat-openbsd
          fi

          # A√±adir el host a known_hosts
          echo "Configurando SSH..."
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts 2>/dev/null

          # Funci√≥n para verificar conectividad SSH con reintentos
          verificar_ssh() {
            local intentos=0
            local max_intentos=15
            
            while [ $intentos -lt $max_intentos ]; do
              if nc -z -w5 $SSH_HOST 22; then
                echo "‚úÖ Conexi√≥n SSH verificada (intento $((intentos + 1)))"
                return 0
              fi
              intentos=$((intentos + 1))
              echo "‚è≥ Esperando conexi√≥n SSH... (intento $intentos/$max_intentos)"
              sleep 3
            done
            
            echo "‚ùå Error: No se pudo establecer conexi√≥n SSH despu√©s de $max_intentos intentos"
            return 1
          }

          # Funci√≥n para ejecutar comandos SSH con reintentos
          ejecutar_ssh() {
            local comando="$1"
            local descripcion="$2"
            local intentos=0
            local max_intentos=3
            
            while [ $intentos -lt $max_intentos ]; do
              echo "Ejecutando: $descripcion (intento $((intentos + 1))/$max_intentos)"
              
              if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=10 -o ServerAliveCountMax=3 $SSH_USER@$SSH_HOST "$comando"; then
                echo "‚úÖ $descripcion completado exitosamente"
                return 0
              fi
              
              intentos=$((intentos + 1))
              if [ $intentos -lt $max_intentos ]; then
                echo "‚ö†Ô∏è Fall√≥ $descripcion, reintentando en 5 segundos..."
                sleep 5
                verificar_ssh || return 1
              fi
            done
            
            echo "‚ùå Error: $descripcion fall√≥ despu√©s de $max_intentos intentos"
            return 1
          }

          # Verificar conectividad inicial
          verificar_ssh || exit 1

          # Verificar que el directorio dist existe
          if [ ! -d "frontend/dist" ]; then
            echo "‚ùå Error: El directorio frontend/dist no existe"
            exit 1
          fi

          # Crear estructura de directorios en el servidor
          ejecutar_ssh "mkdir -p $DEPLOY_PATH/frontend/temp && echo 'Directorios creados correctamente'" "Creaci√≥n de directorios" || exit 1

          # Transferir archivos con reintentos
          echo "Transfiriendo archivos..."
          transfer_intentos=0
          max_transfer_intentos=3
          
          while [ $transfer_intentos -lt $max_transfer_intentos ]; do
            transfer_intentos=$((transfer_intentos + 1))
            echo "Intento de transferencia $transfer_intentos/$max_transfer_intentos"
            
            if scp -r -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=10 frontend/dist/* $SSH_USER@$SSH_HOST:$DEPLOY_PATH/frontend/temp/; then
              echo "‚úÖ Transferencia completada exitosamente"
              break
            fi
            
            if [ $transfer_intentos -lt $max_transfer_intentos ]; then
              echo "‚ö†Ô∏è Fall√≥ la transferencia, reintentando en 5 segundos..."
              sleep 5
              verificar_ssh || exit 1
            else
              echo "‚ùå Error: Fall√≥ la transferencia despu√©s de $max_transfer_intentos intentos"
              exit 1
            fi
          done

          # Realizar el despliegue at√≥mico con script mejorado
          echo "Realizando despliegue at√≥mico..."
          
          # Script de despliegue dividido en pasos m√°s peque√±os para evitar timeouts
          echo "Paso 1: Preparando backup..."
          ejecutar_ssh "cd $DEPLOY_PATH && if [ -d frontend/dist ]; then mv frontend/dist frontend/dist_backup_\$(date +%Y%m%d_%H%M%S); echo 'Backup creado'; else echo 'No hay directorio previo para backup'; fi" "Crear backup" || exit 1
          
          echo "Paso 2: Moviendo archivos nuevos..."
          ejecutar_ssh "cd $DEPLOY_PATH && mv frontend/temp frontend/dist && echo 'Archivos movidos exitosamente'" "Mover archivos" || {
            echo "Error moviendo archivos, intentando restaurar..."
            ejecutar_ssh "cd $DEPLOY_PATH && LATEST_BACKUP=\$(ls -dt frontend/dist_backup_* 2>/dev/null | head -n1) && if [ -n \"\$LATEST_BACKUP\" ]; then rm -rf frontend/dist 2>/dev/null || true && mv \"\$LATEST_BACKUP\" frontend/dist && echo 'Backup restaurado'; fi" "Restaurar backup"
            exit 1
          }
          
          echo "Paso 3: Verificando integridad..."
          ejecutar_ssh "cd $DEPLOY_PATH && if [ ! -d frontend/dist ] || [ -z \"\$(ls -A frontend/dist 2>/dev/null)\" ]; then echo 'Error: directorio vac√≠o'; exit 1; else echo 'Verificaci√≥n exitosa: \$(ls frontend/dist | wc -l) archivos'; fi" "Verificar archivos" || exit 1
          
          echo "Paso 4: Limpiando backups antiguos..."
          ejecutar_ssh "cd $DEPLOY_PATH && ls -dt frontend/dist_backup_* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true && echo 'Limpieza completada'" "Limpiar backups" || echo "‚ö†Ô∏è Error en limpieza (no cr√≠tico)"
          
          echo "Paso 5: Recargando nginx..."
          ejecutar_ssh "sudo systemctl reload nginx && echo 'Nginx recargado exitosamente'" "Recargar nginx" || {
            echo "‚ö†Ô∏è Error recargando nginx, pero archivos desplegados correctamente"
            echo "Puedes recargar nginx manualmente con: sudo systemctl reload nginx"
          }

          echo "üöÄ Frontend desplegado exitosamente en $SSH_HOST"
          echo "‚úÖ Proceso completado sin errores"